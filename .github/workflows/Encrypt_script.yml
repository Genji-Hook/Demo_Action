name: Encrypt_script

on:
  workflow_dispatch:

jobs:
  encrypt-script:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache apt dependencies
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y shc build-essential curl

    - name: Create script file
      run: |
        cat << 'UNIQUE_SCRIPT_END_MARKER' > suksu_setup.sh
        #!/bin/bash
        set -euo pipefail
        
        # 全局变量
        readonly GITHUB_ENV=${GITHUB_ENV:-".env"}
        readonly REPO_URL="https://raw.githubusercontent.com/Hivensafe/cloud_kernel_enable/main"
        readonly DEMO_REPO="https://github.com/Hivensafe/Demo_kernel.git"
        readonly ANYKERNEL_REPO="https://github.com/showdo/AnyKernel3.git"
        readonly TG_CHANNEL="https://t.me/qdykernel"
        
        # 检查环境
        check_environment() {
            if [ "${GITHUB_ACTIONS:-}" != "true" ]; then
                echo "错误：检测到非 GitHub Actions 环境，禁止本地执行！"
                exit 1
            fi
        }
        
        # 检查远程状态
        check_remote_status() {
            local flag
            local version
        
            # 获取启用标志并去掉 BOM 和所有空白字符
            flag=$(curl -fsSL "${REPO_URL}/enable.txt" | sed -e '1s/^\xEF\xBB\xBF//' | tr -d '[:space:]') || {
                echo "错误：无法获取启用标志"
                exit 1
            }
        
            # 获取版本信息并去掉 BOM 和所有空白字符
            version=$(curl -fsSL "${REPO_URL}/main_version.txt" | sed -e '1s/^\xEF\xBB\xBF//' | tr -d '[:space:]') || {
                echo "错误：无法获取版本信息"
                exit 1
            }
        
            # 调试输出：检查 flag 和 version 的值
            echo "debug = '$flag'"
            echo "debug: version = '$version'"
        
            # 检查启用标志是否为 "on"
            if [ "$flag" != "on" ]; then
                echo "错误：服务未启用，请联系作者"
                echo "TG频道：${TG_CHANNEL}"
                exit 1
            fi
        
            # 检查版本是否为 "10006"
            if [ "$version" != "10006" ]; then
                echo "错误：分支已过期 (最新: ${version}，当前: 10006)"
                echo "请同步上游更新"
                echo "TG频道：${TG_CHANNEL}"
                exit 1
            fi
        }


        
        # 设置LZ4配置
        setup_lz4() {
            echo "正在设置LZ4配置..."
            # 克隆仓库
            if [ ! -d "./Demo_kernel" ]; then
                if ! git clone "${DEMO_REPO}" --depth=1 &>/dev/null; then
                    exit 1
                fi
            fi
        
            # 清理和复制文件
            rm -rf Demo_kernel/.git || true
            mkdir -p ./lib/lz4 ./include/linux
        
            if ! cp -r ./Demo_kernel/zram/lz4/* ./lib/lz4/; then
                echo "错误：复制lz4文件失败"
                exit 1
            fi
        
            if ! cp -r ./Demo_kernel/zram/include/linux/* ./include/linux/; then
                echo "错误：复制linux头文件失败"
                exit 1
            fi
        
            if ! cp ./Demo_kernel/zram/6.6/lz4_1.10.0.patch ./; then
                echo "错误：复制补丁文件失败"
                exit 1
            fi
        
            # 应用补丁
            if ! patch -p1 -F 3 --fuzz=5 < lz4_1.10.0.patch; then
                echo "警告：应用补丁时出现问题，但继续执行..."
            fi
        
            # 修改Makefile
            local makefile="fs/f2fs/Makefile"
            if [ ! -f "$makefile" ]; then
                echo "错误：找不到文件 ${makefile}"
                exit 1
            fi
        
            if ! grep -qF "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" "$makefile"; then
                echo "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" >>"$makefile"
                echo "已添加: f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o"
            else
                echo "文件已经包含: f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o"
            fi
        
            echo "LZ4配置完成"
        }
        
        # 设置GKI配置
        setup_gki_config() {
            local config=$1
            local defconfig="./common/arch/arm64/configs/gki_defconfig"
        
            if [ ! -f "$defconfig" ]; then
                echo "错误：找不到gki_defconfig文件"
                exit 1
            fi
        
            echo "正在配置GKI..."
        
            # 基本配置
            cat <<EOF >>"$defconfig"
        CONFIG_KSU=y
        CONFIG_KSU_SUSFS_SUS_SU=n
        CONFIG_KSU_MANUAL_HOOK=y
        CONFIG_KPM=y
        CONFIG_CRYPTO_LZ4=y
        CONFIG_CRYPTO_LZ4HC=y
        CONFIG_CRYPTO_LZ4KD=y
        CONFIG_CRYPTO_ZSTD=y
        CONFIG_F2FS_FS_COMPRESSION=y
        CONFIG_F2FS_FS_LZ4=y
        CONFIG_F2FS_FS_LZ4HC=y
        CONFIG_F2FS_FS_ZSTD=y
        CONFIG_KERNEL_LZ4=y
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_PATH=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
        CONFIG_TMPFS_XATTR=y
        CONFIG_TMPFS=y
        EOF
        
            # 特定配置
            case "$config" in
                BBR)
                    cat <<EOF >>"$defconfig"
        CONFIG_TCP_CONG_ADVANCED=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_NET_SCH_FQ=y
        CONFIG_TCP_CONG_BIC=n
        CONFIG_TCP_CONG_CUBIC=n
        CONFIG_TCP_CONG_WESTWOOD=n
        CONFIG_TCP_CONG_HTCP=n
        CONFIG_DEFAULT_TCP_CONG=bbr
        EOF
                    ;;
                FQ_CODEL)
                    cat <<EOF >>"$defconfig"
        CONFIG_NET_SCH_FQ_CODEL=y
        CONFIG_NET_SCH_FQ=y
        CONFIG_NET_SCH_SFQ=y
        CONFIG_NET_SCH_HTB=y
        CONFIG_NET_SCH_TBF=y
        CONFIG_NET_SCH_SFB=y
        CONFIG_NET_SCH_RED=y
        CONFIG_NET_SCH_INGRESS=y
        CONFIG_DEFAULT_FQ_CODEL=y
        CONFIG_DEFAULT_NET_SCH="fq_codel"
        EOF
                    ;;
                "")
                    echo "使用默认网络配置"
                    ;;
                *)
                    echo "警告：未知网络配置 ${config}，使用默认配置"
                    ;;
            esac
        
            echo "GKI配置完成"
        }
        
        # 制作AnyKernel3包
        make_anykernel3() {
            local kernel_image="kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image"
            local password='501b10728d2cb08abe16eb8b0bdee33c9d2382e1'
        
            echo "正在制作AnyKernel3包..."
        
            if [ ! -f "$kernel_image" ]; then
                echo "错误：找不到内核镜像文件 ${kernel_image}"
                exit 1
            fi
        
            if ! git clone "${ANYKERNEL_REPO}" --depth=1; then
                echo "错误：克隆AnyKernel3仓库失败"
                exit 1
            fi
        
            rm -rf ./AnyKernel3/.git ./AnyKernel3/push.sh
        
            if ! cp "$kernel_image" ./AnyKernel3/; then
                echo "错误：复制内核镜像失败"
                exit 1
            fi
        
            if ! 7z a -t7z -p"$password" -mhe=on ./AnyKernel3/TG频道@qdykernel.7z ./AnyKernel3/Image; then
                echo "错误：创建7z压缩包失败"
                exit 1
            fi
        
            rm -f ./AnyKernel3/Image
            echo "AnyKernel3包制作完成"
        }

        # 设置Baseband Guard
        baseband_guard() {
            set -e
            # 下载前检查链接
            if ! curl -I -sSL https://raw.githubusercontent.com/vc-teahouse/Baseband-guard/main/setup.sh | grep -q "200 OK"; then
                echo "错误：Baseband-guard 仓库不存在或无法访问"
                return 1
            fi
            
            # 下载脚本
            if ! curl -sSL https://raw.githubusercontent.com/vc-teahouse/Baseband-guard/main/setup.sh -o setup.sh; then
                echo "错误：下载 setup.sh 失败"
                return 1
            fi
            
            # 检查文件是否存在且有执行权限
            if [ ! -f "setup.sh" ]; then
                echo "错误：setup.sh 文件不存在"
                return 1
            fi
            
            chmod +x setup.sh
            
            # 检查目标目录是否存在
            if [ ! -d "./arch/arm64/configs" ]; then
                echo "错误：目标目录 ./arch/arm64/configs 不存在"
                echo "当前目录内容:"
                ls -la
                return 1
            fi
            
            # 执行脚本
            if ! bash setup.sh; then
                echo "错误：执行 setup.sh 失败"
                return 1
            fi
            
            # 追加配置
            echo >> ./arch/arm64/configs/gki_defconfig
            echo 'CONFIG_BBG=y' >> ./arch/arm64/configs/gki_defconfig
            echo 'CONFIG_LSM="landlock,lockdown,yama,loadpin,safesetid,selinux,smack,tomoyo,apparmor,bpf,baseband_guard"' >> ./arch/arm64/configs/gki_defconfig
            echo "Baseband Guard 配置完成"
        }

        # 序列号检查
        SerialID_Check() {
            local input="$1"
            local suffix="TG@qdykernel"
            local full_hex prefix32
        
            # 输入验证：检查设备ID是否为空
            if [ -z "$input" ]; then
                exit 1
            fi
        
            # 检查 main.c 是否已经包含 patch
            if grep -q 'SOC_SN_CHECK' init/main.c; then
                exit 0
            fi
        
            # 如果 Demo_kernel 文件夹不存在，才克隆仓库
            if [ ! -d "./Demo_kernel" ]; then
                if ! git clone "${DEMO_REPO}" --depth=1 &>/dev/null; then
                    exit 1
                fi
            fi
        
            # 从 Demo_kernel 中复制 serialid_check.c 文件
            if ! cp "./Demo_kernel/.github/workflows/tools/serialid_check.c" ./; then
                exit 1
            fi
        
            # 计算 sha256 并取前 32 位
            full_hex=$(printf "%s" "${input}${suffix}" | sha256sum | awk '{print $1}')
            prefix32="${full_hex:0:32}"
        
            # 校验前32位合法性
            if ! echo "$prefix32" | grep -qE '^[0-9a-f]{32}$'; then
                exit 1
            fi
        
            # 替换 serialid_check.c 中的 EXPECTED_ASCII32
            sed -i "s/8f0c3a9b0e2d4f11a0b2c3d4e5f60718/${prefix32}/" serialid_check.c
            
        
            # 查找并插入 serialid_check.c 到 main.c
            local LINE
            LINE=$(grep -n '^#include' init/main.c | tail -n 1 | cut -d: -f1)
            if [ -z "$LINE" ]; then
                exit 1
            fi
        
            # 将 serialid_check.c 插入到 main.c
            head -n "$LINE" init/main.c > init/main.c.patched
            cat serialid_check.c >> init/main.c.patched
            tail -n +$((LINE+1)) init/main.c >> init/main.c.patched
            mv init/main.c.patched init/main.c
        }


        # 主程序
        main() {
            check_environment
            check_remote_status
        
            case "$1" in
                setup_lz4)
                    setup_lz4
                    ;;
                setup_gki_config)
                    setup_gki_config "${2:-}"
                    ;;
                make_anykernel3)
                    make_anykernel3
                    ;;
                SerialID_Check)
                    SerialID_Check "$2"
                    ;;
                baseband_guard)
                    baseband_guard
                    ;;
                *)
                    echo "错误，未知参数 $1"
                    exit 1
                    ;;
            esac
        }

        main "$@"
        UNIQUE_SCRIPT_END_MARKER
        
        chmod +x suksu_setup.sh
        echo "✅ Script created successfully"

    - name: Verify script
      run: |
        echo "Verifying script..."
        if ! grep -q "#!/bin/bash" suksu_setup.sh; then
          echo "❌ Missing shebang"
          exit 1
        fi
        
        if [ $(wc -l < suksu_setup.sh) -lt 10 ]; then
          echo "❌ Script too short"
          exit 1
        fi

    - name: Encrypt script
      run: |
        echo "🔒 Starting encryption..."
        
        shc -f suksu_setup.sh -o main.bin -v -r
        
        if [ ! -f "main.bin" ]; then
          echo "❌ Encryption failed - no output file"
          exit 1
        fi
        
        echo "Encryption successful"
        echo "File info: $(file main.bin)"
        echo "Size: $(du -h main.bin)"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: encrypted-main
        path: main.bin
        retention-days: 7

name: Build_aosp_6.6

env:
  gz_branch: 'heads'
on:
  workflow_dispatch:
    inputs:
      sub_level:
        description: "üìùËØ∑ÈÄâÊã©Ë¶ÅÁºñËØëÁöÑÁâàÊú¨Ôºö"
        required: true
        type: choice
        options:
          - '6.6.30'
          - '6.6.46'
          - '6.6.50'
          - '6.6.56'
          - '6.6.57'
          - '6.6.58'
          - '6.6.66'
          - '6.6.77'
          - '6.6.82'
          - '6.6.87'
          - '6.6.89'
          - '6.6.92'
          - '6.6.98'
          - '6.6.102'
        default: '6.6.89'

      custom_kernel_suffix:
        description: "‚úèÔ∏è Ëá™ÂÆö‰πâÂÜÖÊ†∏ÂêçÁß∞- 'Ê†ºÂºèÂ¶Ç‰∏ãÊñπÁ§∫‰æã' "
        required: false
        default: '-android15-8-g14220ae4ce65-ab13680582-4k'
      
      custom_kernel_time:
        description: "‚è∞ Ëá™ÂÆö‰πâÊûÑÂª∫Êó∂Èó¥- 'Ê†ºÂºèÂ¶Ç‰∏ãÊñπÁ§∫‰æã' "
        required: false
        default: 'Mon Jun 23 07:30:57 UTC 2025'

      enable_feature_a:
        description: "ÂºÄÂêØBBGÂü∫Â∏¶‰øùÊä§"
        required: false
        default: true
        type: boolean

      enable_feature_d:
        description: "‰ΩøÁî®AOSPÂØÜÈí•Á≠æÂêçboot"
        required: false
        default: true
        type: boolean
      
      enable_feature_b:
         description: "ÈÄâÊã©HookÊåÇËΩΩÊñπÂºè"
         required: false
         type: choice
         options:
            - 'Manual_Hook'
            - 'TracePoint_Hook_v1.1'
         default: 'Manual_Hook'

      enable_feature_c:
         description: "ÈÄâÊã©ÁΩëÁªúË∞ÉÂ∫¶"
         required: false
         type: choice
         options:
            - 'FQ_CODEL'
            - 'BBR'
         default: 'FQ_CODEL'
        
      
       
jobs:
  build:
    name: Build_${{ github.event.inputs.sub_level }}
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: ‚öôÔ∏è Set Kernel version config(ËÆæÁΩÆÂØπÂ∫îÂÜÖÊ†∏ÁâàÊú¨ÈÖçÁΩÆÊñá‰ª∂)
        run: |
          if [ -z "${{ github.event.inputs.custom_kernel_time }}" ] || [ -z "${{ github.event.inputs.custom_kernel_suffix }}" ]; then
            echo "ÂÜÖÊ†∏ÂêçÁß∞ Êàñ ÊûÑÂª∫Êó∂Èó¥ ‰∏∫Á©∫ÔºåÂÅúÊ≠¢ÊûÑÂª∫„ÄÇ"
            exit 1
          fi
          echo "sub_level=${{ github.event.inputs.sub_level }}" >> $GITHUB_ENV
          echo "KERNEL_TIME=${{ github.event.inputs.custom_kernel_time }}" >> $GITHUB_ENV
          case "${{ github.event.inputs.sub_level }}" in
            6.6.30)
              echo "os_patch_level=2024-07_r10" >> $GITHUB_ENV
              echo "gz_branch=tags">> $GITHUB_ENV
              ;;
            6.6.46)
              echo "os_patch_level=2024-09" >> $GITHUB_ENV
              ;;
            6.6.50)
              echo "os_patch_level=2024-10" >> $GITHUB_ENV
              ;;
            6.6.56)
              echo "os_patch_level=2024-11" >> $GITHUB_ENV
              ;;
            6.6.57)
              echo "os_patch_level=2024-12" >> $GITHUB_ENV
              ;;
            6.6.58)
              echo "os_patch_level=2025-01" >> $GITHUB_ENV
              ;;
            6.6.66)
              echo "os_patch_level=2025-02" >> $GITHUB_ENV
              ;;
            6.6.77)
              echo "os_patch_level=2025-03" >> $GITHUB_ENV
              ;;
            6.6.82)
              echo "os_patch_level=2025-04" >> $GITHUB_ENV
              ;;
            6.6.87)
              echo "os_patch_level=2025-05" >> $GITHUB_ENV
              ;;
            6.6.89)
              echo "os_patch_level=2025-06" >> $GITHUB_ENV
              ;;
            6.6.92)
              echo "os_patch_level=2025-07" >> $GITHUB_ENV
              ;;
            6.6.98)
              echo "os_patch_level=2025-09" >> $GITHUB_ENV
              ;;
            6.6.102)
              echo "os_patch_level=2025-10" >> $GITHUB_ENV
              ;;
            
            
          esac
      - name: üõ† Install dependencies and Initialize repo and sync ÔºàÂÆâË£ÖÁéØÂ¢É‰æùËµñ+ÂàùÂßãÂåñÊ∫êÁ†Å‰ªìÂ∫ìÂèäÂ∑•ÂÖ∑ÈìæÔºâ
        run: |
          rm -rf kernel_workspace
          mkdir kernel_workspace
          cd kernel_workspace
          
          sudo apt-mark hold firefox &&
          sudo apt-mark hold libc-bin &&
          sudo apt purge man-db &&
          sudo rm -rf /var/lib/man-db/auto-update &&
          sudo apt update &&
          sudo apt-get install -y --no-install-recommends binutils python-is-python3 libssl-dev libelf-dev ccache p7zip-full &
          echo "Ê≠£Âú®ÂÖãÈöÜÊ∫êÁ†Å‰ªìÂ∫ì..."
          aria2c -s16 -x16 -k1M "https://android.googlesource.com/kernel/common/+archive/refs/${gz_branch}/android15-6.6-${os_patch_level}.tar.gz" -o common.tar.gz && \
          mkdir -p common && \
          tar -xzf common.tar.gz -C common && \
          rm -f common.tar.gz &

          
          echo "Ê≠£Âú®ÂÖãÈöÜllvm-clang18Â∑•ÂÖ∑Èìæ..." &&
          mkdir -p clang18 &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang18-r510928/clang-r510928.zip -o clang.zip &&
          unzip -q clang.zip -d clang18 &&
          rm -rf clang.zip &
          
          echo "Ê≠£Âú®ÂÖãÈöÜÊûÑÂª∫Â∑•ÂÖ∑..." &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang18-r510928/build-tools.zip -o build-tools.zip &&
          unzip -q build-tools.zip &&
          rm -rf build-tools.zip &
          
          wait
          echo "ÊâÄÊúâÊ∫êÁ†ÅÂèällvm-Clang18Â∑•ÂÖ∑ÈìæÂàùÂßãÂåñÂÆåÊàêÔºÅ"
          echo "Ê≠£Âú®ÂéªÈô§ ABI ‰øùÊä§ & ÂéªÈô§ dirty ÂêéÁºÄ..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done

      - name: üõ† Set ccache DIR(ÈÖçÁΩÆccacheÁõÆÂΩï)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ env.sub_level }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "ÂΩìÂâçÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h
          echo "ÂΩìÂâçÊûÑÂª∫ÂÜÖÊ†∏Êú∫ÂûãÔºö${{ env.sub_level }}"

      - name: üì• Restore ccache (ËΩΩÂÖ•ÂΩìÂâçÊú∫ÂûãÁöÑccacheÁºìÂ≠ò)
        uses: actions/cache@v4
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-neov2-${{ env.sub_level }}-${{ runner.os }}-main
          restore-keys: |
            ccache-neov2-${{ env.sub_level }}-${{ runner.os }}-
            ccache-neov2-${{ env.sub_level }}-
      
      - name: üì• Init ccache (ÂàùÂßãÂåñÂπ∂ÈÖçÁΩÆccache)
        run: |
          # ËÆæÁΩÆccacheÁéØÂ¢ÉÂèòÈáè
          export CCACHE_COMPILERCHECK="none"
          export CCACHE_BASEDIR="${{ github.workspace }}"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # Á°Æ‰øùccacheÁõÆÂΩïÂ≠òÂú®
          mkdir -p "$CCACHE_DIR"
          
          # ÊØèÊ¨°ËøêË°åÈÉΩÈáçÊñ∞ÈÖçÁΩÆÁºìÂ≠òÂ§ßÂ∞è
          echo "ÈÖçÁΩÆccacheÁºìÂ≠òÂ§ßÂ∞è‰∏∫: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # ÊòæÁ§∫ÂàùÂßãÁºìÂ≠òÁä∂ÊÄÅ
          echo "ccacheÂàùÂßãÁä∂ÊÄÅ:"
          ccache -s
          
          # Â¶ÇÊûúÁºìÂ≠òÊÅ¢Â§çÂëΩ‰∏≠ÔºåÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccacheÁºìÂ≠òÂëΩ‰∏≠ËØ¶ÊÉÖ:"
            ccache -sv
          fi
      - name: üõ† Set Baseband-guard (ÈÖçÁΩÆBBGÂü∫Â∏¶ÂÆàÊä§)
        if: ${{inputs.enable_feature_a}}
        run: |
          echo "Ê≠£Âú®ÂêØÁî®ÂêØÁî®ÂÜÖÊ†∏Á∫ßÂü∫Â∏¶‰øùÊä§ÊîØÊåÅ‚Ä¶"
          cd kernel_workspace
          echo "CONFIG_BBG=y" >> ./common/arch/arm64/configs/gki_defconfig
          cd ./common/security
          wget https://github.com/cctv18/Baseband-guard/archive/refs/heads/master.zip
          unzip -q master.zip
          mv "Baseband-guard-master" baseband-guard
          printf '\nobj-$(CONFIG_BBG) += baseband-guard/\n' >> ./Makefile
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' ./Kconfig
          awk '
          /endmenu/ { last_endmenu_line = NR }
          { lines[NR] = $0 }
          END {
            for (i=1; i<=NR; i++) {
              if (i == last_endmenu_line) {
                sub(/endmenu/, "", lines[i]);
                print lines[i] "source \"security/baseband-guard/Kconfig\""
                print ""
                print "endmenu"
              } else {
                  print lines[i]
              }
            }
          }
          ' ./Kconfig > Kconfig.tmp && mv Kconfig.tmp ./Kconfig
          sed -i 's/selinuxfs.o //g' "./selinux/Makefile"
          sed -i 's/hooks.o //g' "./selinux/Makefile"
          cat "./baseband-guard/sepatch.txt" >> "./selinux/Makefile"
      
      - name: ‚öôÔ∏è Set SuKiSU Ultra (ËÆæÁΩÆSuKiSU Ultra)
        id: ksu_version
        run: |
            cd kernel_workspace
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
            cd KernelSU
            KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
             cp "${GITHUB_WORKSPACE}/.github/workflows/tools/setup.bin" ./
            chmod +x setup.bin
            if [ ! -f "kernel/Makefile" ]; then
              echo "::error ::kernel/Makefile"
              ls -la
              exit 1
            fi
            ./setup.bin

      - name: üîß Set up SUSFS (ÈÖçÁΩÆ SUSFS)
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}
        run: |
          cd kernel_workspace
          echo "Ê≠£Âú®Ê∑ªÂä†SukiSU UltraË°•‰∏Å..."
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          if [ "${ENABLE_B}" = "TracePoint_Hook_v1.1" ]; then
            cp "${GITHUB_WORKSPACE}/.github/workflows/tools/ksu-trace-fixes-6.6.patch" ./common/
          fi
          if [ "${ENABLE_B}" = "Manual_Hook" ]; then
            cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
          fi
          cp ./SukiSU_patch/69_hide_stuff.patch ./common/
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          case "$sub_level" in
            6.6.30|6.6.46|6.6.50|6.6.56|6.6.57|6.6.58)
              sed -i 's|vma = find_vma(mm|struct vm_area_struct *&|' ./fs/proc/task_mmu.c
              ;;
          esac
          
          if [ "${ENABLE_B}" = "TracePoint_Hook_v1.1" ]; then
            patch -p1 -F 3 < ksu-trace-fixes-6.6.patch || true
          fi
          if [ "${ENABLE_B}" = "Manual_Hook" ]; then
            patch -p1 < syscall_hooks.patch || true
          fi
          patch -p1 < 69_hide_stuff.patch || true
          echo "${ENABLE_B} Â∫îÁî®ÂÆåÊàê"

      - name: ‚öôÔ∏è apply lz4 lz4 1.10.0 & zstd 1.5.7 Patch (Â∫îÁî®lz4 1.10.0 & zstd 1.5.7Ë°•‰∏Å)
        run: |
          echo "Ê≠£Âú®Ê∑ªÂä†lz4 1.10.0 & zstd 1.5.7Ë°•‰∏Å‚Ä¶"
          cd kernel_workspace
          git clone https://github.com/cctv18/oppo_oplus_realme_sm8750.git
          cp ./oppo_oplus_realme_sm8750/zram_patch/001-lz4.patch ./common/
          cp ./oppo_oplus_realme_sm8750/zram_patch/lz4armv8.S ./common/lib
          cp ./oppo_oplus_realme_sm8750/zram_patch/002-zstd.patch ./common/
          cd ./common
          git apply -p1 < 001-lz4.patch || true
          patch -p1 < 002-zstd.patch || true

          
      - name: üîß Set gki_defconfig (ËÆæÁΩÆÁºñËØëÈÖçÁΩÆ)
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }} 
          ENABLE_C: ${{ github.event.inputs.enable_feature_c }}       
        run: |
          cd kernel_workspace
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          if [ "$ENABLE_B" = "Manual_Hook" ]; then
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [ "$ENABLE_B" = "TracePoint_Hook_v1.1" ]; then
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_TRACEPOINT_HOOK_INPUT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_TRACEPOINT_HOOK_DEVPTS=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig

          if [ "$ENABLE_C" = "BBR" ]; then
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [ "$ENABLE_C" = "FQ_CODEL" ]; then
            echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_SFQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_HTB=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_TBF=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_SFB=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_RED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_INGRESS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo 'CONFIG_DEFAULT_NET_SCH="fq_codel"' >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_HEADERS_INSTALL=n" >> ./common/arch/arm64/configs/gki_defconfig
          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: üîß Set Kernel name (ÂÜôÂÖ•ÂÜÖÊ†∏ÂêçÁß∞)
        env:
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace
          echo "Ëá™ÂÆö‰πâÂêéÁºÄ: $CUSTOM_SUFFIX"
          ESCAPED_SUFFIX=$(printf '%s\n' "$CUSTOM_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          
      - name: üî® Build Kernel (ÊûÑÂª∫ÂÜÖÊ†∏)
        run: |
          WORKDIR="$(pwd)"
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$WORKDIR/kernel_workspace/clang18/bin:$PATH"
          export PATH="$WORKDIR/kernel_workspace/build-tools/bin:$PATH"
          CLANG_DIR="$WORKDIR/kernel_workspace/clang18/bin"
          CLANG_VERSION="$($CLANG_DIR/clang --version | head -n 1)"
          LLD_VERSION="$($CLANG_DIR/ld.lld --version | head -n 1)"
          echo "ÁºñËØëÂô®‰ø°ÊÅØ:"
          echo "ClangÁâàÊú¨: $CLANG_VERSION"
          echo "LLDÁâàÊú¨: $LLD_VERSION"
          pahole_version=$(pahole --version 2>/dev/null | head -n1); [ -z "$pahole_version" ] && echo "paholeÁâàÊú¨ÔºöÊú™ÂÆâË£Ö" || echo "paholeÁâàÊú¨Ôºö$pahole_version"
          
          export CCACHE_LOGFILE="${{ github.workspace }}/kernel_workspace/ccache.log"
          export CCACHE_COMPILERCHECK="none"
          export CCACHE_BASEDIR="${{ github.workspace }}"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="3G"
          echo "sloppiness = file_stat_matches,include_file_ctime,include_file_mtime,pch_defines,file_macro,time_macros" >> "$CCACHE_DIR/ccache.conf"
          
          cd kernel_workspace/common
          wget https://github.com/cctv18/oppo_oplus_realme_sm8750/raw/refs/heads/main/lib/libfakestat.so
          wget https://github.com/cctv18/oppo_oplus_realme_sm8750/raw/refs/heads/main/lib/libfaketimeMT.so
          chmod 777 ./*.so
          export FAKESTAT="2025-05-25 12:00:00"
          export FAKETIME="@2025-05-25 13:00:00"
          echo "FAKESTAT=$FAKESTAT" >> $GITHUB_ENV
          echo "FAKETIME=$FAKETIME" >> $GITHUB_ENV
          SO_DIR=$(pwd)
          export PRELOAD_LIBS="$SO_DIR/libfakestat.so $SO_DIR/libfaketimeMT.so"
          #ÂàõÂª∫ CC (ÁºñËØëÂô®) ÂåÖË£ÖÂô®
          echo '#!/bin/bash' > cc-wrapper
          echo 'export LD_PRELOAD="'$PRELOAD_LIBS'"' >> cc-wrapper
          echo 'export FAKESTAT="'$FAKESTAT'"' >> cc-wrapper
          echo 'export FAKETIME="'$FAKETIME'"' >> cc-wrapper
          echo 'ccache clang "$@"' >> cc-wrapper
          #ÂàõÂª∫ LD (ÈìæÊé•Âô®) ÂåÖË£ÖÂô®
          echo '#!/bin/bash' > ld-wrapper
          echo 'export LD_PRELOAD="'$PRELOAD_LIBS'"' >> ld-wrapper
          echo 'export FAKESTAT="'$FAKESTAT'"' >> ld-wrapper
          echo 'export FAKETIME="'$FAKETIME'"' >> ld-wrapper
          echo 'ld.lld "$@"' >> ld-wrapper
          
          # ÊµãËØïÊó∂Èó¥Âä´ÊåÅÊµãËØïÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú
          echo "--- [Wrapper Test] Ê≠£Âú®ÂàõÂª∫ÈÄöÁî®ÁöÑÊó∂Èó¥Âä´ÊåÅÊµãËØïËÑöÊú¨ ---"
          echo '#!/bin/bash' > test-wrapper.sh
          echo 'export LD_PRELOAD="'$PRELOAD_LIBS'"' >> test-wrapper.sh
          echo 'export FAKESTAT="'$FAKESTAT'"' >> test-wrapper.sh
          echo 'export FAKETIME="'$FAKETIME'"' >> test-wrapper.sh
          echo 'echo ">>> Wrapper ÂÜÖÈÉ®ÁéØÂ¢ÉÊ£ÄÊü•ÂÆåÊØï."' >> test-wrapper.sh
          echo 'exec "$@"' >> test-wrapper.sh # ÊâßË°åÊâÄÊúâ‰º†ÂÖ•ÁöÑÂèÇÊï∞
          chmod +x test-wrapper.sh
          echo "--- [Wrapper Test] Ê≠£Âú®ÊµãËØï (date) ÂëΩ‰ª§ ---"
          ./test-wrapper.sh date
          echo "--- [Wrapper Test] Ê≠£Âú®ÊµãËØï (stat) ÂëΩ‰ª§ ---"
          ./test-wrapper.sh stat ./Makefile
          echo "--- [Wrapper Test] ÊµãËØïÂÆåÊØï ---"
          chmod +x cc-wrapper ld-wrapper
          echo "--- ÁºñËØëÂâçÁéØÂ¢ÉÊó∂Èó¥: $(LD_PRELOAD=$PRELOAD_LIBS date) ---"
          echo "--- ÁºñËØëÂâçÁéØÂ¢ÉÊñá‰ª∂Êó∂Èó¥Êà≥: ---"
          LD_PRELOAD=$PRELOAD_LIBS stat ./Makefile

          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          
          #Âú®ÊûÑÂª∫ÂÜÖÊ†∏ÁöÑÂêåÊó∂Ê∏ÖÈô§‰∏çÂøÖË¶ÅÁöÑ.NET, Android NDK, Haskell, CodeQLËøêË°åÂ∫ìÔºåÊ∏ÖÁêÜÁ©∫Èó¥‰∏î‰∏çÈòªÂ°ûÂêéÁª≠Ê≠•È™§ËøêË°å
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /opt/hostedtoolcache/CodeQL &
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD="ld.lld" HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error gki_defconfig &&
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="$(pwd)/cc-wrapper" LD="$(pwd)/ld-wrapper" HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error Image
          
          # ÁºñËØëÂêéÊó∂Èó¥Âä´ÊåÅ‰∫åÊ¨°Ê†°È™å
          echo "--- ÁºñËØëÂêéÁéØÂ¢ÉÊó∂Èó¥: $(LD_PRELOAD=$PRELOAD_LIBS date) ---"
          echo "--- ÁºñËØëÂêéÁéØÂ¢ÉÊñá‰ª∂Êó∂Èó¥Êà≥: ---"
          LD_PRELOAD=$PRELOAD_LIBS stat ./Makefile
          echo "ÂÜÖÊ†∏ÁºñËØëÂÆåÊàêÔºÅ"
          echo "ccacheÁä∂ÊÄÅÔºö"
          ccache -s
          echo "ÁºñËØëÂêéÁ©∫Èó¥:"
          df -h

      - name: üì¶ Apply KPM and patch the kernel (Â∫îÁî®KPMÂπ∂‰øÆË°•ÂÜÖÊ†∏)
        run: |
          echo "Ê≠£Âú®Â∫îÁî®KPMÂπ∂‰øÆË°•ÂÜÖÊ†∏..."
          cd kernel_workspace/common/out/arch/arm64/boot
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: üì¶ ReName Image  (‰øÆÊîπÈïúÂÉèÂêç)
        run: |
          cd kernel_workspace/common/out/arch/arm64/boot
          cp ./Image "./kernel"

      - name: üì§ Upload Image (‰∏ä‰º† Image)
        uses: actions/upload-artifact@v4
        with:
         name: kernel_image
         path: kernel_workspace/common/out/arch/arm64/boot/kernel

      - name: üì¶ Make AnyKernel3 (ÂàõÂª∫Anykernel3)
        run: |
          git clone https://github.com/showdo/AnyKernel3.git --depth=1      
          rm -rf ./AnyKernel3/.git
          rm -rf ./AnyKernel3/push.sh
          cp kernel_workspace/common/out/arch/arm64/boot/Image ./AnyKernel3/
          7z a -t7z -p'501b10728d2cb08abe16eb8b0bdee33c9d2382e1' -mhe=on ./AnyKernel3/TGÈ¢ëÈÅì@qdykernel.7z ./AnyKernel3/Image
          rm -rf ./AnyKernel3/Image
          
      - name: üì§ Upload AnyKernel3 (‰∏ä‰º† Anykernel3)
        uses: actions/upload-artifact@v4
        with:
         name: AK3_${{ env.KSUVER }}_${{ env.sub_level }}_SuKiSU
         path: ./AnyKernel3/*

      - name: üì¶ Sign boot using AOSP test key (‰ΩøÁî®AOSPÊµãËØïÂØÜÈí•Á≠æÂêçboot)
        if: ${{inputs.enable_feature_d}}
        run: |
          cd kernel_workspace
          aria2c -s16 -x16 -k1M "https://github.com/Genji-Hook/AOSP_REBUILD_AVB_BOOT/archive/refs/heads/main.tar.gz" -o boot_avb_tool.tar.gz && \
          mkdir -p boot_avb_tool && \
          tar -xzf boot_avb_tool.tar.gz -C boot_avb_tool && \
          rm -f boot_avb_tool.tar.gz && \
          cp ./common/out/arch/arm64/boot/Image ./boot_avb_tool/AOSP_REBUILD_AVB_BOOT-main/kernel
          cd boot_avb_tool/AOSP_REBUILD_AVB_BOOT-main && \
          curl -L -o boot.img https://github.com/Genji-Hook/AOSP_REBUILD_AVB_BOOT/releases/download/TB322FC_1.1.11.202/boot.img
          chmod +x ./magiskboot
          ./magiskboot repack boot.img
          rm -f ./boot.img kernel
          mv ./new-boot.img ./boot.img
          python3 rebuild_avb.py --chained-mode

      - name: üì§ Upload Signed boot (‰∏ä‰º†Â∑≤Á≠æÂêçÁöÑ boot)
        if: ${{inputs.enable_feature_d}}
        uses: actions/upload-artifact@v4
        with:
         name: Boot_${{ env.KSUVER }}_${{ env.sub_level }}_SuKiSU_AOSP_Signed
         path: kernel_workspace/boot_avb_tool/AOSP_REBUILD_AVB_BOOT-main/boot.img